<% idx = group_num - 1 %>

<%# Get the group instance â€“ it may not exist! %>
<% group = @composition.try(:groups)&.values_at(idx)&.first %>

<fieldset
  <%= html_attributes(class: "field_with_errors") if group&.errors.present? %>
  data-data-explorer--composition-url-target="groupChooser">
  <!-- <legend>Group <%= group_num %></legend> -->

  <label for="<%= "group.#{group_num}" %>">Group By</label>
  <select class="dimension" <%= html_attributes(id: "group.#{group_num}", name: "group.#{group_num}") %>>
    <option value=""></option>

    <% DataSchema.dimensions.each do |dimension_name, dimension_def| %>
      <% dim_key = dimension_def["QueryKey"] || dimension_name %>
      <option
        data-dimension-type="<%= dimension_def["Type"] %>"
        value="<%= dim_key %>"
        <%= select_eq group&.dimension == dimension_name.to_sym %>>
        <%= schema_field_label(dimension_name) %>
      </option>
    <% end %>
  </select>

  <div class="timestamp-options">
    <select class="mode-chooser" name="<%= "group.#{group_num}.timestamp-mode" %>">
      <option value="range">Range</option>
      <option value="truncate" <%= select_eq group&.truncate %>>Truncate</option>
      <option value="extract" <%= select_eq group&.extract %>>Extract</option>
    </select>

    <select class="extract-options" name="<%= "group.#{group_num}.extract" %>">
      <option></option>

      <%# If the group has a extract value we don't recognize, add an option %>
      <%# for it, to help with error messages %>
      <% unless Compositions::Components::Group::EXTRACT_OPTS.include?(group&.extract) %>
        <option selected><%= group&.extract %></option>
      <% end %>

      <% Compositions::Components::Group::EXTRACT_OPTS.each do |part| %>
        <option <%= html_attributes(value: part) %> <%= select_eq group&.extract == part %>><%= part.to_s.humanize %></option>
      <% end %>
    </select>

    <select class="truncate-options" name="<%= "group.#{group_num}.truncate" %>">
      <option></option>

      <%# If the group has a truncate value we don't recognize, add an option %>
      <%# for it, to help with error messages %>
      <% unless Compositions::Components::Group::TRUNCATE_OPTS.include?(group&.truncate) %>
        <option selected><%= group&.truncate %></option>
      <% end %>

      <% Compositions::Components::Group::TRUNCATE_OPTS.each do |part| %>
        <option value="<%= part %>" <%= select_eq group&.truncate == part %>><%= t "group_choosers.truncate.display.#{part}" %></option>
      <% end %>
    </select>

    <div class="timestamp-ranges" data-controller="data-explorer--group-chooser">
      Ranges:
      <a href="#" data-action="data-explorer--group-chooser#addRange">Add range</a>

      <% indices = group&.indices %>

      <ul>
        <li>Less than: <input type="text" autocomplete="off" data-action="data-explorer--group-chooser#changeRangeIndex" <%= html_attributes(value: to_duration_shorthand(indices.first)) if indices.try(:first) %>></li>

        <% if indices && indices.size > 1 %>
          <% i = 0 %>
          <% while i < indices.size - 1 do %>
            <li>Greater Than Or Equal To: <input disabled <%= html_attributes(value: indices[i]) %>> and less than <input data-action="data-explorer--group-chooser#changeRangeIndex" <%= html_attributes(value: indices[i + 1]) %>> <a href="#" data-action="data-explorer--group-chooser#removeRange">X</a></li>
            <% i += 1 %>
          <% end %>
        <% end %>

        <li>Greater than or equal to: <input type="text" disabled autocomplete="off" <%= html_attributes(value: indices.last) if indices.try(:last) %>></li>
      </ul>
    </div>
  </div>

  <div class="duration-options">
    <div class="duration-ranges" data-controller="data-explorer--group-chooser">
      Ranges:
      <a href="#" data-action="data-explorer--group-chooser#addRange">Add range</a>

      <% indices = group&.indices %>

      <ul>
        <li>Less than: <input type="text" autocomplete="off" data-action="data-explorer--group-chooser#changeRangeIndex" <%= html_attributes(value: to_duration_shorthand(indices.first)) if indices.try(:first) %>></li>

        <% if indices && indices.size > 1 %>
          <% i = 0 %>
          <% while i < indices.size - 1 do %>
            <li>Greater Than Or Equal To: <input disabled <%= html_attributes(value: to_duration_shorthand(indices[i])) %>> and less than <input data-action="data-explorer--group-chooser#changeRangeIndex" <%= html_attributes(value: to_duration_shorthand(indices[i + 1])) %>> <a href="#" data-action="data-explorer--group-chooser#removeRange">X</a></li>
            <% i += 1 %>
          <% end %>
        <% end %>

        <li>Greater than or equal to: <input type="text" disabled autocomplete="off" <%= html_attributes(value: to_duration_shorthand(indices.last)) if indices.try(:last) %>></li>
      </ul>
    </div>
  </div>

  <% if group_num == 1 %>
    <div class="meta-options">
      <% DataSchema.dimensions.each do |dimension_name, dimension_def| %>
        <% dim_key = dimension_def["QueryKey"] || dimension_name %>

        <div <%= html_attributes(class: "meta-options-for-#{dim_key}") %>>
          <%# If this dimension has an exhibit field, we want to include the dimension itself %>
          <%# as meta option, so that the user can include the raw, non-exhibit value if they want %>
          <% if dimension_def["ExhibitField"] %>
            <% x = "meta-#{dimension_name}-#{dimension_name}" %>
            <label for="<%= x %>">
              <input
                type="checkbox"
                value="<%= dim_key %>"
                id="<%= x %>"
                <%= html_attributes(checked: "checked") if group&.meta&.include?(dimension_name.to_sym) %>
                <%= html_attributes(name: "group.#{group_num}.meta") %>>
              <%= schema_field_label(dimension_name) %> (raw)
            </label>
          <% end %>

          <%# List all the static fields for this dimension, but exclude the exhibit field, since it %>
          <%# will already be displayed. %>
          <% dimension_def["StaticFields"]&.each do |static_field_name| %>
            <% static_field_def = DataSchemaUtil.field_definition(static_field_name) %>
            <% static_field_key = static_field_def["QueryKey"] || static_field_name %>
            <% x = "meta-#{static_field_name}-#{dimension_name}" %>
            <label for="<%= x %>">
              <input
                type="checkbox"
                value="<%= static_field_key %>"
                id="<%= x %>"
                <%= html_attributes(checked: "checked") if group&.meta&.include?(static_field_name.to_sym) %>
                <%= html_attributes(name: "group.#{group_num}.meta") %>>
              <%= schema_field_label(static_field_name) %>
            </label>
          <% end %>
        </div>
      <% end %>
    </div>
  <% end %>
</fieldset>
